// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  BOTH
}

enum Status {
  DRAFT
  SUBMITTED
  REJECTED
  FINISHED
  ONGOING
}

model User {
  id          String     @id @unique @default(uuid())
  name        String
  email       String     @unique
  password    String?
  isVerified  Boolean    @default(false) @map("is_verified")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  phoneNumber String     @map("phone_number")
  terms       Boolean    @map("terms")
  role        Role       @default(USER) @map("role")
  campaigns   Campaign[]
  files       UserFile[]

  @@map("user")
}

model Campaign {
  id                  String                @id @unique @default(uuid())
  name                String
  description         String?
  gender              Gender
  location            String
  amount              Decimal?              @db.Decimal(18, 2)
  expectedDate        DateTime?             @map("expected_date")
  estimatedReach      String?               @map("estimated_reach")
  status              Status                @default(DRAFT)
  notes               String?
  isActive            Boolean               @default(true) @map("is_active")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  user                User                  @relation(fields: [userId], references: [id])
  userId              String                @map("user_id")
  activity            Activity              @relation(fields: [activityId], references: [id])
  activityId          String                @map("activity_id")
  campaignOnPlacement CampaignOnPlacement[]
  files               UserFile[]

  @@map("campaign")
}

model Activity {
  id        String     @id @unique @default(uuid())
  name      String
  isActive  Boolean    @default(true) @map("is_active")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  campaigns Campaign[]

  @@map("activity")
}

model Placement {
  id                  String                @id @unique @default(uuid())
  name                String
  isActive            Boolean               @default(true) @map("is_active")
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  campaignOnPlacement CampaignOnPlacement[]

  @@map("placement")
}

model CampaignOnPlacement {
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  String
  placement   Placement @relation(fields: [placementId], references: [id])
  placementId String
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@id([campaignId, placementId])
  @@map("campaign_on_placement")
}

model UserFile {
  id         String    @id @unique @default(uuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id")
  key        String    @unique
  filename   String
  mimetype   String
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
  campaignId String?   @map("campaign_id")

  @@map("user_file")
}
